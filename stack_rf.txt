Replace the system call stack with an explicit one.

  Eg. Take a sequence that thinkers for a Jack

  take_turn(p1)
    (calls) ThinkerOrLeadDialog
    (calls) perform_thinker_action(p1)
            (calls) UseVomitoriumDialog(p1)
            (calls) UseLatrineDialog(p1)
            (calls) ThinkerTypeDialog(p1)
            (calls) game_state.draw_one_jack_for_player(p1)
    (calls) end_turn(p1)

This uses the call stack where take_turn calls perform_thinker_action()
which calls the Dialogs and effects the thinker action.

To be able to pause the game and resume, we take control of the call stack,
explicitly creating a frame for each action or sub-action, and resolve them
in LIFO order.

  Eg. The same thinker sequence

  Frame(take_turn)
      (make Frame) ThinkerOrLead
          (calls) ThinkerOrLeadDialog(p1)
      (make Frame) DoThinker
          (calls) ThinkerTypeDialog(p1)
      (make Frame) DoThinkerStart
          # This goes on the stack after DoThinker and resolves first
          (calls) UseVomitoriumDialog()
          (calls) UseLatrineDialog()
          (calls) game_state.draw_one_jack_for_player(p1)

For this example, the stack will look like this:

  Frame(take_turn)
  Frame(thinker_or_lead)
  Frame(DoThinker)
  Frame(DoThinkerStart) 

These resolve in reverse order, so DoThinkStart asks about Latrine
and Vomitorium. Then DoThinker does the actual card draw.
The take_turn frame then moves to the end of the turn. If, at any
time the game is interrupted, the whole stack state can be
saved.
